//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef enum {
    field_compression_none,
    field_compression_bitpacked,
    field_compression_common_data,
    field_compression_bitpacked_indexed,
    field_compression_bitpacked_indexed_array,
    field_compression_bitpacked_signed
} FieldCompression;

typedef struct {
    SetColor( cWhite, cDkRed );
    char magic[4];
    SetColor( cBlack, cWhite );
    
    uint record_count;
    uint field_count;
    uint record_size;
    uint string_table_size;
    uint table_hash;
    uint layout_hash;
    uint min_id;
    uint max_id;
    uint locale;
    ushort flags;
    ushort id_index;
    uint total_field_count;
    uint bitpacked_data_offset;
    uint lookup_column_count;
    uint field_storage_info_size;
    uint common_data_size;
    uint pallet_data_size;
    uint section_count;

} Header;

typedef struct {    
    uquad tact_key_hash;
    uint file_offset;
    uint record_count;
    uint string_table_size;
    uint offset_records_end;
    uint id_list_size;
    uint relationship_data_size;
    uint offset_map_id_count;
    uint copy_table_count;

} SectionHeader;

typedef struct {
    short size;
    ushort position;
} FieldStructure;

typedef struct {
    ushort field_offset_bits;
    ushort field_size_bits;
    uint additional_data_size;
    FieldCompression storage_type;

    switch(storage_type)
    {
        case field_compression_bitpacked :
        case field_compression_bitpacked_signed :
            uint bitpacking_offset_bits;
            uint bitpacking_size_bits;
            uint flags;
            break;
        case field_compression_common_data :
            uint default_value;
            uint unk_or_unused2;
            uint unk_or_unused3;
            break;
        case field_compression_bitpacked_indexed :
            uint bitpacking_offset_bits;
            uint bitpacking_size_bits;
            uint unk_or_unused3;
            break;
        case field_compression_bitpacked_indexed_array :
            uint bitpacking_offset_bits;
            uint bitpacking_size_bits;
            uint array_count;
            break;
        default :
            uint unk_or_unused1;
            uint unk_or_unused2;
            uint unk_or_unused3;
            break;
    }
} FieldStorageInfo<optimize=false>;

typedef struct (int size) {
    FieldStorageInfo field_info[size];
} FieldStorageInfos;

typedef struct (Header &header) {
    char data[header.record_size];
} RecordData<optimize=false>;

typedef struct {
    uint id_of_new_row;
    uint id_of_copied_row;
} CopyTabeEntry<optimize=false>;

typedef struct {
    uint offset;
    ushort size;
} OffsetMapEntry<optimize=false>;

typedef struct {
    uint foreign_id;
    uint record_index;
} RelationshipEntry<optimize=false>;

typedef struct {
    uint num_entries;
    uint min_id;
    uint max_id;
    RelationshipEntry entries[num_entries];
} RelationshipMapping<optimize=false>;

typedef struct (Header &header, SectionHeader &section_header) {
    if ((header.flags & 1) == 0)
    {
        RecordData records(header)[section_header.record_count];
        char string_data[section_header.string_table_size];
    }
    else
    {
        char variable_record_data[section_header.offset_records_end - section_header.file_offset];
    }

    uint id_list[section_header.id_list_size / 4];

    if (section_header.copy_table_count > 0)
    {
        CopyTabeEntry copy_table[section_header.copy_table_count];
    }

    if(section_header.offset_map_id_count > 0)
    {
        OffsetMapEntry offset_map[section_header.offset_map_id_count];   
    }

    if (section_header.relationship_data_size > 0)
    {
        RelationshipMapping relationship_map;
    }

    if(section_header.offset_map_id_count > 0)
    {
        uint offset_map_id_list[section_header.offset_map_id_count];
    }

} Section<optimize=false>;

typedef struct (Header &header, SectionHeader section_headers[]) {
    for(i=0; i < header.section_count; i++)
    {
        Section data_sections(header, section_headers[i]);
    }
} Sections<optimize=false>;

struct {
    Header header;
    SectionHeader sectionHeaders[header.section_count];
    FieldStructure fieldStructure[header.total_field_count];
    FieldStorageInfos field_infos(header.field_storage_info_size/28);
    
    byte pallet_data[header.pallet_data_size];
    
    if(header.common_data_size > 0)
    {
        byte common_data[header.common_data_size];
    }

    local int i;
    Sections sections(header, sectionHeaders);
} db2;
